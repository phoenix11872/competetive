
struct Node {
    Node * links[26];
    bool flag = false;
    ll cntEndWith = 0;
    ll cntPrefix = 0;
    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }
    void put(char ch, Node *node) {
        links[ch - 'a'] = node;
    }
    Node *get(char ch) {
        return links[ch - 'a'];
    }
    void setEnd() {
        flag = true;
    }
    bool isEnd() {
        return flag;
    }
    void increaseEnd() {
        cntEndWith++;
    }
    void increasePrefix() {
        cntPrefix++;
    }
    void deleteEnd() {
        cntEndWith--;
    }
    void reducePrefix() {
        cntPrefix--;
    }
    ll getEnd() {
        return cntEndWith;
    }
    ll getPrefix() {
        return cntPrefix;
    }
};
class Trie {
private:
    Node * root;
public:
    Trie() {
        root = new Node();
    }
    void insert(string &word) {
        Node * node = root;
        for (int i = 0; i < word.size(); i++) {
            if (!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
            node->increasePrefix();
        }
        node->setEnd();
        node->increaseEnd();
    }
    bool search(string &word) {
        Node * node = root;
        for (int i = 0; i < word.size(); i++) {
            if (!node->containsKey(word[i])) {
                return false;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }
    bool startsWith(string &prefix) {
        Node *node = root;
        for (int i = 0; i < prefix.size(); i++) {
            if (!node->containsKey(prefix[i])) {
                return false;
            }
            node = node->get(prefix[i]);
        }
        return true;
    }
    ll cntWordsEqualTo(string & word) {
        Node *node = root;
        for (int i = 0; i < word.size(); i++) {
            if (node->containsKey(word[i])) {
                node = node->get(word[i]);
            } else {
                return 0;
            }
        }
        return node->getEnd();
    }
    ll countWordsStartingWith(string &word) {
        Node * node = root;
        for (int i = 0; i < word.size(); i++) {
            if (node->containsKey(word[i])) {
                node = node->get(word[i]);
            } else {
                return 0;
            }
        }
        return node->getPrefix();
    }
    void erase(string &word) {
        Node *node = root;
        if (!search(word)) {
            return;
        }
        for (int i = 0; i < word.size(); i++) {
            if (node->containsKey(word[i])) {
                node = node->get(word[i]);
                node->reducePrefix();
            }
        }
        node->deleteEnd();
    }

};
